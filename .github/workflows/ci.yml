name: CI
on:
  pull_request:
    branches:
      - 'main'
      - 'release-*'
  push:
    branches:
      - 'main'
      - 'release-*'
    tags: '*'
concurrency:
  # Skip intermediate builds: all builds except for builds on the `main` or `release-*` branches
  # Cancel intermediate builds: only pull request builds
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-') || github.run_number }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - 'nightly'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-12 # Intel
          - macos-13 # Intel
          - macos-14 # Apple Silicon
        julia-word-size:
          - '32'
          - '64'
        exclude:
          - os: macos-12
            julia-word-size: '32'
          - os: macos-13
            julia-word-size: '32'
          - os: macos-14
            julia-word-size: '32'
    steps:
      - uses: actions/checkout@v4
      - name: Determine the value of JULIA_ARCH
        id: determine-julia-arch
        shell: bash
        env:
          JULIA_WORD_SIZE: ${{ matrix.julia-word-size }}
        run: |
          echo "RUNNER_ARCH is: ${RUNNER_ARCH:?}"
          if [[ "${JULIA_WORD_SIZE:?}" == "32" ]]; then
            echo "julia-arch=x86" >> "${GITHUB_OUTPUT:?}"
          elif [[ "$JULIA_WORD_SIZE" == "64" ]]; then
            echo 'a is greater than b'
            echo "julia-arch=${RUNNER_ARCH:?}" >> "${GITHUB_OUTPUT:?}"
          else
            echo "Invalid value for JULIA_WORD_SIZE: ${JULIA_WORD_SIZE:?}"
            exit 1
          fi
      - run: JULIA_ARCH is "${{ steps.determine-julia-arch.outputs.julia-arch }}"
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ steps.determine-julia-arch.outputs.julia-arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-${{ matrix.os }}
            ${{ runner.os }}-
      - run: julia --color=yes .ci/test_and_change_uuid.jl
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          SPARSEARRAYS_AQUA_TEST: true
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          file: lcov.info
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@latest
        with:
          # version: '1.6'
          version: 'nightly'
      - name: Generate docs
        run: |
          julia --color=yes -e 'write("Project.toml", replace(read("Project.toml", String), r"uuid = .*?\n" =>"uuid = \"3f01184e-e22b-5df5-ae63-d93ebab69eaf\"\n"));'
          julia --project --color=yes -e 'using Pkg; Pkg.activate("docs"); Pkg.instantiate(); Pkg.develop(PackageSpec(path = pwd()))'
          julia --project=docs --color=yes docs/make.jl pdf
        env:
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
